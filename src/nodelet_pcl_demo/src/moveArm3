#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
import math
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler


class MoveArm(object):
	def __init__(self):
		self.robot = moveit_commander.RobotCommander()
		self.scene = moveit_commander.PlanningSceneInterface()
		self.group_name = "right_arm"
		self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
	    
                self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)


	def current_state(self):
		current_state = self.robot.get_current_state() 
		return current_state
    
        # Compute 
	def set_joints(self):
		joint_goal = self.move_group.get_current_joint_values()
		
                #joint_goal[0]=0.0
		#joint_goal[1]=0.0
		#joint_goal[2]=0.0
		#joint_goal[3]=np.pi/2
		#joint_goal[4]=0.0
		#joint_goal[5]=0.0
		#joint_goal[6] = -np.pi/2

		joint_goal = [0, 0, 0, 0, 0, 0, 0]
                
                self.move_group.go(joint_goal, wait=True)
		self.move_group.stop()
        
        # This method will plan a path
        def set_pose(self):
            
            pose_goal = geometry_msgs.msg.Pose()
            pose_goal.orientation.w = 1.0
            pose_goal.position.x = 0.4
            pose_goal.position.y = 0.1
            pose_goal.position.z = 0.4

            self.move_group.set_pose_target(pose_goal)
            
            plan = self.move_group.go(wait=True)
            # Calling `stop()` ensures that there is no residual movement
            self.move_group.stop()

            # It is always good to clear your targets after planning with poses.
            # Note: there is no equivalent function for clear_joint_value_targets()
            
            # 
            self.move_group.clear_pose_targets()


        # https://ros-planning.github.io/moveit_tutorials/doc/move_group_python_interface/move_group_python_interface_tutorial.html
        # Make Sawyer's arm move through a series of points
        def plan_cartesian_path(self):
            pass  




rospy.sleep(5)
myMoveArm = MoveArm()
myMoveArm.set_joints()
# myMoveArm.set_pose()


